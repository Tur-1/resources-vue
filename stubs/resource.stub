import { BaseResource, Column, Action } from '@tur1/resources-vue'
import use{{pageName}}Api from '@/pages/{{pageName}}/api/use{{pageName}}Api'  
import Edit{{PageNameSingular}} from '@/pages/{{pageName}}/Actions/Edit{{PageNameSingular}}'
import Create{{PageNameSingular}} from '@/pages/{{pageName}}/Actions/Create{{PageNameSingular}}'
import ExampleFilter from '@/pages/{{pageName}}/Filters/ExampleFilter'
import use{{pageName}}Service from '@/pages/{{pageName}}/services/use{{pageName}}Service'

const {destroy} = use{{pageName}}Service();

class {{pageName}} extends BaseResource {
  /**
   * The title of the page.
   * @type {string}
   */
  title = '{{pageName}}';

  /**
   * Enable or disable simple pagination. 
   * @type {Boolean}
   */
  simplePagination = true;

  /**
   * The query key used for pagination in URL parameters.
   * @type {string}
   */
  paginationQueryKey = 'page';

  /**
   * The display style for the layout.
   * Can be 'grid' or 'table'.
   *
   * @type {string}
   * @default 'table'
   */
  display = "table";

  /**
   * Searchable status of the resource.
   * @type {boolean}
   */
  searchable = true;

  /**
   * Placeholder for the search input.
   * @type {string}
   */
  searchPlaceholder = 'search';

  /**
   * Get the data for the resource.
   */
  async data() {
    let response = await use{{pageName}}Api.getPaginatedList()

    return {
      data: response.data.data,
      links:response.data.links,
      meta:response.data.meta
    }
  }

  /**
   * Get the fields for the resource.  
   */
  fields() {
    return [
      Column().make('id').label('id'),

      Column().make('user.avatar').image().label('Image'),

      Column().make('name').label('Name'),
         Column()
        .make('gender')
        .label('Gender')
        .badge((value) => (value === 'male' ? 'primary' : 'secondary')),

      Column().make('status').label('Status').badge({
        active: 'success',
        inactive: 'danger'
      }),

      Column()
        .make('created_at')
        .label('Created At')
        .format((date) => new Date(date).toLocaleDateString())
    ]
  }

 /**
 * Get the header actions for the resource.
 *
 */
  headerActions() {
    return [new Create{{PageNameSingular}}()];
  }

  /**
   * Get the filters for the resource. 
   */
  filters() {
    return [new ExampleFilter()];
  }

  /**
   * Get the actions for the resource.
   */
  actions() {
    return [  
      new Edit{{PageNameSingular}}(),

      Action()
        .label('show')
        .icon('fa-solid fa-pen-to-square')
        .class('text-primary')
        .route((record) => ({ name: '{{snakeCasePageName}}.show', params: { 'id': record.id } })),

      Action()
      .deleteAction()
      .make(async (record) => await destroy(record))
      .onSuccess((record) => console.log(record))
      .onFailure((err, record) => console.log(err, record)),

    ];
  }

 /**
  * Get the bulk actions for the resource. 
  */
  bulkActions()
  {
    return [
      Action()
        .label('log items')
        .class('text-primary')
        .make((records) => console.log(records))
    ];
  }

}

export default {{pageName}};